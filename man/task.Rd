% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Flow.R
\name{task}
\alias{task}
\alias{Task}
\title{Object representing a task, which is a wiring of a module inputs and outputs to specific entity annotations names}
\usage{
Task(...)

\S4method{task}{Job}(.Object)
}
\arguments{
\item{...}{additional FlowLiteral or Flow Annotation boject}

\item{config}{path to text based ".task" task config file or Module object}

\item{mem}{memory limit to task (default 4)}

\item{name}{name of task}

\item{libdir}{libdir library / module directory}

\item{output}{FlowOutput object or list of FlowOutput object}
}
\description{
initializing Task
requires Module object (or path to module file), and values for all arguments required by Task with literals or names of columns
from which to populate eventual job data.
also can specify default mem for task (can be changed at job level)
output is a task configuration
module can also be a text based task configuration file which will have the format:
MODULE_PATH (
input       [(annotation)|(literal)]         VALUE
...
...
output      ANNOTATION_NAME                  REGEXP_FOR_FILE

ie first row is the module path, the next rows specify whether input or output is being specified
in the first column, and if input, the second column specifies whether annotation or literal and third column specifis value
otherwise for output, second column specifies the name of the output annotation and the third column specifies the
regexp used to query the output directory for the output file

a task object is normally instantiated from a text .task file.

It wraps together Module, FlowLiteral, FlowOutput, and FlowAnnotation objects and can also be instantiated directly from them.

The task definition file has a header, pointer to a directory containing all the code necessary to run the module + a .deploy
file (a la firehose .deploy), and inputs / outputs in a standard syntax.

Here is an example of a task  definition for Jeremiah Wala's Snowman rearrangement detector

#Module Snowman ('<libdir>snow.sh <libdir>snowman_150410 run  -t  <tumor_bam>  -n  <normal_bam>  -e  <error_rate>  -p ...')
~/modules/Snowman/
input   tumor_bam       Tumor_clean_bam_file_wgs        path
input   normal_bam      Normal_clean_bam_file_wgs       path
input   error_rate      '0'     value
input   cpus    '1'     value
input   analysis_id     pair_id value
input   panel_of_normals        '/xchip/gistic/Jeremiah/Projects/Lung/lung_snow24_pon.txt.gz'   path
input   indel_mask      '/xchip/gistic/Jeremiah/Projects/HengLiMask/um75-hs37d5.bed.gz'         path
input   flags   '--no-r2c-bam'                                                                  value
output  snowman_somatic_vcf     .*DATECODE.somatic.sv.vcf
output  snowman_germline_vcf    .*DATECODE.germline.sv.vcf
output  snowman_somatic_indel_vcf       .*DATECODE.somatic.indel.vcf
output  snowman_germline_indel_vcf      .*DATECODE.germline.indel.vcf
}
\author{
Marcin Imielinski

Marcin Imielinski
}
